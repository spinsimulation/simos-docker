name: Build & Push to GHCR

on:
  push:
    branches: [ main, master ]
    tags: [ "v*", "release-*" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  GHCR: ghcr.io
  IMAGE_BASENAME: simos

jobs:
  base:
    name: Build base (${{ matrix.flavor }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: cpu
            dockerfile: dockerfiles/Dockerfile.cpu
            platforms: linux/amd64
          - flavor: mkl
            dockerfile: dockerfiles/Dockerfile.mkl
            platforms: linux/amd64
          - flavor: cuda
            dockerfile: dockerfiles/Dockerfile.cuda
            platforms: linux/amd64
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name
        id: naming
        run: |
          OWNER=${GITHUB_REPOSITORY_OWNER,,}
          echo "image=${{ env.GHCR }}/${OWNER}/${{ env.IMAGE_BASENAME }}" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.naming.outputs.image }}
          tags: |
            type=raw,value=${{ matrix.flavor }},enable={{is_default_branch}}
            type=ref,event=tag,suffix=-${{ matrix.flavor }}
            type=sha,prefix=sha-,suffix=-${{ matrix.flavor }}
          labels: |
            org.opencontainers.image.title=SimOS (${{ matrix.flavor }})
            org.opencontainers.image.description=SimOS ${{ matrix.flavor }} base image

      - name: Build & Push (${{ matrix.flavor }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  jupyter:
    name: Build jupyter (${{ matrix.flavor }})
    runs-on: ubuntu-latest
    needs: [ base ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: cpu
            dockerfile: dockerfiles/Dockerfile.cpu-jupyter
            platforms: linux/amd64
            base_tag: cpu
          - flavor: mkl
            dockerfile: dockerfiles/Dockerfile.mkl-jupyter
            platforms: linux/amd64
            base_tag: mkl
          - flavor: cuda
            dockerfile: dockerfiles/Dockerfile.cuda-jupyter
            platforms: linux/amd64
            base_tag: cuda
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name
        id: naming
        run: |
          OWNER=${GITHUB_REPOSITORY_OWNER,,}
          echo "image=${{ env.GHCR }}/${OWNER}/${{ env.IMAGE_BASENAME }}" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.naming.outputs.image }}
          tags: |
            type=raw,value=${{ matrix.flavor }}-jupyter,enable={{is_default_branch}}
            type=ref,event=tag,suffix=-${{ matrix.flavor }}-jupyter
            type=sha,prefix=sha-,suffix=-${{ matrix.flavor }}-jupyter
          labels: |
            org.opencontainers.image.title=SimOS (${{ matrix.flavor }}-jupyter)
            org.opencontainers.image.description=SimOS ${{ matrix.flavor }} image with Jupyter

      - name: Build & Push (${{ matrix.flavor }}-jupyter)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platforms }}
          # If your jupyter Dockerfiles accept BASE_IMAGE, you can pass it:
          # build-args: |
          #   BASE_IMAGE=${{ steps.naming.outputs.image }}:${{ matrix.base_tag }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max