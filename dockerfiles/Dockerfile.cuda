# ---------- Build stage: has nvcc + dev toolchain ----------
FROM nvidia/cuda:12.6.0-devel-ubuntu24.04 AS build

ARG UID=1001
ARG GID=1001

ENV DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1

# Dev toolchain + headers needed to compile numpy/scipy/parament wheels
RUN apt-get update && apt-get install -y --no-install-recommends \
      python3 python3-venv python3-pip python3-dev cython3 \
      build-essential gfortran pkg-config \
      libopenblas-dev liblapack-dev libfftw3-dev libgomp1 \
      ca-certificates curl libstdc++6 \
      tk tcl fonts-dejavu \
  && rm -rf /var/lib/apt/lists/*

# Use a dedicated virtualenv to avoid PEP 668 issues
RUN python3 -m venv /opt/build-venv
ENV PATH="/opt/build-venv/bin:$PATH"

# Upgrade pip tooling inside the venv (safe)
RUN python -m pip install --upgrade pip setuptools wheel

WORKDIR /opt/app
COPY context/requirements.txt ./
COPY context/requirements-gpu.txt ./

# Build wheels for all deps (CPU + CUDA). parament will compile with nvcc here.
RUN mkdir -p /wheelhouse && \
    python -m pip wheel --no-cache-dir -r requirements.txt -w /wheelhouse && \
    python -m pip wheel --no-cache-dir -r requirements-gpu.txt -w /wheelhouse

# ---------- Runtime stage: smaller, CUDA runtime + cuBLAS ----------
FROM nvidia/cuda:12.6.0-runtime-ubuntu24.04

ARG UID=1001
ARG GID=1001

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

# Only runtime libs, no compilers
RUN apt-get update && apt-get install -y --no-install-recommends \
      python3 python3-venv python3-pip \
      ca-certificates curl libstdc++6 \
      libopenblas-dev liblapack-dev libfftw3-dev libgomp1 \
      tk tcl fonts-dejavu \
  && rm -rf /var/lib/apt/lists/*

# Runtime venv
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy wheelhouse from build stage and install without touching system Python
COPY --from=build /wheelhouse /wheelhouse
COPY --from=build /opt/app/requirements.txt /opt/app/requirements.txt
COPY --from=build /opt/app/requirements-gpu.txt /opt/app/requirements-gpu.txt

RUN python -m pip install --upgrade pip && \
    python -m pip install --no-index --find-links=/wheelhouse -r /opt/app/requirements.txt && \
    python -m pip install --no-index --find-links=/wheelhouse -r /opt/app/requirements-gpu.txt && \
    rm -rf /wheelhouse

# Non-root user
RUN groupadd -g ${GID} app && useradd -m -u ${UID} -g ${GID} app
USER app

WORKDIR /workspace

# Runs fine on CPU-only hosts; on GPU hosts, use Docker's --gpus flag.
CMD ["python", "-c", "import simos as sos; print('CUDA image OK')"]